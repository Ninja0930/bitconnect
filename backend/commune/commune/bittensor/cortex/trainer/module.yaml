module: 'TrainerModule'


dataset: 
  module: bittensor.cortex.dataset.DatasetModule
  actor : {refresh: False}
  generator:
    train:
      num_samples: 100
      max_concurrent_calls: 10
      batch_multiplier: 2
      batch_size: 32
      seq_len: 64
      seq_multiplier: 1
      timeout: 10
      num_endpoints: 100
      split: train
    test:
      num_samples: 100
      max_concurrent_calls: 10
      batch_multiplier: 2
      batch_size: 32
      seq_len: 64
      seq_multiplier: 1
      timeout: 10
      num_endpoints: 100
      split: test

bitmodule:
  module: bittensor.cortex.base.BitModule
  network: nakamoto
  wallet: 
    name: const
    hotkey: Tiberius
  

model:
  path: commune.bittensor.cortex.model.RankingModel
  params:
    num_endpoints: 4096


optimizer:
  path: torch.optim.Adam
  params:
    lr: 0.00032

metric:
  ranking_loss:
    path: commune.bittensor.cortex.metric.RankingLoss
    params: {}
  causal_lm_loss:
    path: commune.bittensor.cortex.metric.causal_lm_loss
    params: {}
  cross_entropy:
    path: torch.nn.CrossEntropyLoss
    params: {}



client: {}
  

actor:
  name: local_copy(module)
  refresh: False
  resources: {num_cpus: 1.0}

